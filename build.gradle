/**
 *******************************************************************************
 * Copyright 2019-present Jay B. <j@1791.io>                                   *
 *                                                                             *
 * Licensed under the Apache License, Version 2.0 (the "License");             *
 * you may not use this file except in compliance with the License.            *
 * You may obtain a copy of the License at                                     *
 *                                                                             *
 *     http://www.apache.org/licenses/LICENSE-2.0                              *
 *                                                                             *
 * Unless required by applicable law or agreed to in writing, software         *
 * distributed under the License is distributed on an "AS IS" BASIS,           *
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    *
 * See the License for the specific language governing permissions and         *
 * limitations under the License.                                              *
 *******************************************************************************
 */

import groovy.text.SimpleTemplateEngine
import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption

plugins {
  // Java plugin [ https://docs.gradle.org/5.6.2/userguide/java_plugin.html ].
  id 'java'

  // Java Library plugin [ https://docs.gradle.org/5.6.2/userguide/java_library_plugin.html ].
  id 'java-library'

  // Kotlin JVM plugin [ https://plugins.gradle.org/plugin/org.jetbrains.kotlin.jvm ].
  id 'org.jetbrains.kotlin.jvm' version '1.3.50'

  // Kotlin Dokka plugin [ https://plugins.gradle.org/plugin/org.jetbrains.dokka ].
  id 'org.jetbrains.dokka' version '0.10.0'

  // Eclipse plugin [ https://docs.gradle.org/5.6.2/userguide/eclipse_plugin.html ].
  id 'eclipse'

  // Maven plugin [ https://docs.gradle.org/5.6.2/userguide/maven_plugin.html ].
  id 'maven'

  // Maven plugin [ https://docs.gradle.org/5.6.2/userguide/publishing_maven.html ].
  id 'maven-publish'

  // Bintray plugin [ https://plugins.gradle.org/plugin/com.jfrog.bintray ].
  id 'com.jfrog.bintray' version '1.8.4'
}

java {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8
}

group = 'io.seventeenninetyone'

version = {
  File versionFile = file 'VERSION'
  String versionText = versionFile.getText 'UTF-8'
  versionText.trim()
}()

sourceSets {
  main.java.srcDirs = [
    './src/main/java',
    './src/main/kotlin',
  ]
  test.java.srcDirs = [
    './src/test/java',
    './src/test/kotlin',
  ]

  main.kotlin.srcDirs = [
    './src/main/kotlin',
    './src/main/java',
  ]
  test.kotlin.srcDirs = [
    './src/test/kotlin',
    './src/test/java',
  ]
}

publishing {
  publications {
    BintrayPublication(MavenPublication) {
      artifactId project.name
      from project.components.java
      groupId project.group
      version project.version
    }
  }
}

bintray {
  key = System.getenv('BINTRAY_API_KEY')

  pkg {
    desc = 'A fast, asynchronous, and easy-to-use TCP server for the JVM (built on libuv).'
    // githubRepo = '1791-labs/carlie'
    // githubReleaseNotesFile = 'README.md'
    issueTrackerUrl = 'https://github.com/1791-labs/carlie/issues'
    licenses = [ 'Apache-2.0' ]
    name = project.name
    publicDownloadNumbers = false
    repo = 'maven-open-source'
    userOrg = '1791-labs'

    version {
      gpg {
        sign = true
      }

      name = project.version
    }

    vcsUrl = 'https://github.com/1791-labs/carlie.git'
    websiteUrl = 'https://github.com/1791-labs/carlie'
  }

  publications = [ 'BintrayPublication' ]
  publish = true
  user = System.getenv('BINTRAY_USER')
}

task compileCSources {
  doLast {
    def platforms = [
      'linux-aarch64',
      'linux-x86_64',
      'mac-x86_64',
      'windows-x86',
      'windows-x86_64',
    ]
    platforms.each {
      platform ->
        project.exec {
          // commandLine = [
          //   "${project.projectDir}/tools/cross-compile/run-${platform}",
          //   '/home/project/cmake-run-build',
          // ]
          commandLine = [
            "${project.projectDir}/gradle-compile-c-sources-script",
            "${project.projectDir}",
            "${platform}",
          ]
        }
    }
  }
}

test {
  // Use JUnit Platform (AKA JUnit 5) to execute the tests [ https://docs.gradle.org/5.6.2/javadoc/org/gradle/api/tasks/testing/Test.html#useJUnitPlatform-- ].
  useJUnitPlatform()
}

// task dokkaJava(type: org.jetbrains.dokka.gradle.DokkaTask) {
//   configuration {
//     jdkVersion = 8

//     kotlinTasks {
//       defaultKotlinTasks()
//     }

//     perPackageOption {
//       prefix = 'io.seventeenninetyone.carlie.events'
//       suppress = true
//     }

//     perPackageOption {
//       prefix = 'io.seventeenninetyone.carlie.utilities'
//       suppress = true
//     }
//   }

//   disableAutoconfiguration = true
//   outputDirectory = "${buildDir}/docs-java"
//   outputFormat = 'javadoc'
//   subProjects = [ 'carlie' ]
// }

// task dokkaKotlin(type: org.jetbrains.dokka.gradle.DokkaTask) {
//   configuration {
//     jdkVersion = 8

//     kotlinTasks {
//       defaultKotlinTasks()
//     }

//     perPackageOption {
//       prefix = 'io.seventeenninetyone.carlie.events'
//       suppress = true
//     }

//     perPackageOption {
//       prefix = 'io.seventeenninetyone.carlie.utilities'
//       suppress = true
//     }
//   }

//   disableAutoconfiguration = true
//   outputDirectory = "${buildDir}/docs-kotlin"
//   outputFormat = 'html'
//   subProjects = [ 'carlie' ]
// }

task dokkaMarkdown(type: org.jetbrains.dokka.gradle.DokkaTask) {
  configuration {
    jdkVersion = 8

    kotlinTasks {
      defaultKotlinTasks()
    }

    perPackageOption {
      prefix = 'io.seventeenninetyone.carlie.events'
      suppress = true
    }

    perPackageOption {
      prefix = 'io.seventeenninetyone.carlie.utilities'
      suppress = true
    }
  }

  disableAutoconfiguration = true
  outputDirectory = "${project.projectDir}/docs"
  outputFormat = 'gfm'
  subProjects = [ 'carlie' ]

  doFirst {
    def outputDirectoryPath = Paths.get(tasks.dokkaMarkdown.outputDirectory)
    def outputDirectoryFile = file outputDirectoryPath
    def outputDirectoryDeleted = outputDirectoryFile.deleteDir()
    assert outputDirectoryDeleted
  }

  doLast {
    def outputDirectoryPath = Paths.get(tasks.dokkaMarkdown.outputDirectory)
    def fileTreeStream = Files.walk(outputDirectoryPath)
    fileTreeStream
      .filter {
        path ->
          def fileName = "${path.fileName}".toLowerCase()
          return (fileName == 'index.md')
      }
      .forEach {
        path ->
          def readmePath = path.resolveSibling('README.md')
          try {
            Files.copy(path, readmePath, StandardCopyOption.REPLACE_EXISTING)
          } catch (exception) {
            throw new RuntimeException(exception)
          }
      }
  }
}

task generateDocumentation {}

task generateRuntimeProjectFile {
  doLast {
    def templateFile = file 'src/main/kotlin/io/seventeenninetyone/Project.kt.txt'
    def templateText = templateFile.getText 'UTF-8'
    Map<String, Object> templateBinding = [ 'carlieVersion': "${project.version}" ]
    def templateEngine = new SimpleTemplateEngine()
    def template = templateEngine.createTemplate templateText
    def processedTemplate = template.make templateBinding
    String projectFileContents = "${processedTemplate}"
    def projectFile = file 'src/main/kotlin/io/seventeenninetyone/Project.kt'
    projectFile.setText projectFileContents, 'UTF-8'
  }
}

tasks.compileKotlin.kotlinOptions {
  freeCompilerArgs = [
    '-Xgenerate-strict-metadata-version',
    '-Xjvm-default=enable',
    // '-Xno-call-assertions',
    // '-Xno-param-assertions',
    // '-Xno-receiver-assertions',
    // '-Xstrict-java-nullability-assertions',
  ]
  jvmTarget = '1.8'
}

task printRuntimeClasspath {
  doLast {
    println sourceSets.main.runtimeClasspath.asPath
  }
}

tasks.build.dependsOn tasks.compileCSources
tasks.build.dependsOn tasks.generateDocumentation

tasks.compileKotlin.dependsOn tasks.generateRuntimeProjectFile

tasks.generateDocumentation.dependsOn tasks.generateRuntimeProjectFile
// tasks.generateDocumentation.dependsOn tasks.dokkaJava
// tasks.generateDocumentation.dependsOn tasks.dokkaKotlin
tasks.generateDocumentation.dependsOn tasks.dokkaMarkdown

tasks.printRuntimeClasspath.dependsOn tasks.classes

repositories {
  // By default, resolve dependencies using Bintrayâ€™s JCenter repository [ https://jcenter.bintray.com ].
  jcenter()
}

dependencies {
  // The Kotlin Standard Library [ https://github.com/JetBrains/kotlin/tree/v1.3.50/libraries/stdlib/jdk8 ].
  implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.50'

  // The Java Native Access library [ https://github.com/java-native-access/jna/tree/5.4.0 ].
  implementation 'net.java.dev.jna:jna:5.4.0'

  // The Google Guava library [ https://github.com/google/guava/tree/v28.1 ].
  implementation 'com.google.guava:guava:28.1-jre'

  // The JUnit Jupiter libraries [ https://github.com/junit-team/junit5/tree/r5.5.2 ].
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
  gradleVersion = '5.6.2'
}
